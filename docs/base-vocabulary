* Controllers - class where we can handle HTTP requests with depends on method, route (nest g co - to generate controller)

* Providers (Services) - help to separate business login and from controllers, make this logic reusable between multiple
    controllers. It can inject dependencies - create relationship to each other (nest g s - to generate service)

* Modules - ideal Nest architecture should employee multiple modules, each encapsulating closely related set of
    capabilities (f.e. group controllers and services that serve same thing into own feature module) (nest g module name)

* Dependency injection works through types

* Data Transfer Object, DTO - object that are used to encapsulate data and send it from one app to another. Define an
    interfaces of input/output within our system (what we expect to receive) (nest g class path/name.dto --no-spec)

* Docker - platform to build run and share apps within containers
To use docker we should create a configuration file using yml and define database container in yml format
    Docker image - multilayer file that will execute code in a container

* TypeORM - allow us to interact with entities in the db in type safe manner
    TypeORM Entity - represents relationships between ts class and db table
    Setting synchronize: true, allow TypeORM to authentically generate a SQL table from all classes with the entity decorator
        in the metadata they contain (only for dev mode)

TO INTEGRATE DB, TYPEORM SHOULD INSTALL:
    @nestjs/typeorm
    typeorm
    pg

